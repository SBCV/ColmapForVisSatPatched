diff --git a/src/mvs/model.h b/src/mvs/model.h
index a6fcf94..656e659 100755
--- a/src/mvs/model.h
+++ b/src/mvs/model.h
@@ -50,9 +50,9 @@ namespace mvs {
 // Simple sparse model class.
 struct Model {
   struct Point {
-    float x = 0;
-    float y = 0;
-    float z = 0;
+    double x = 0;
+    double y = 0;
+    double z = 0;
     std::vector<int> track;
   };
 
@@ -61,7 +61,10 @@ struct Model {
   void ReadFromCOLMAP(const std::string& path,
                       const std::string& sparse_path = "sparse",
                       const std::string& images_path = "images");
-  void ReadFromPMVS(const std::string& path);
+  // Compute the robust minimum and maximum depths from the sparse point cloud.
+  std::vector<std::pair<float, float>> GetDepthRanges() const {
+    return depth_ranges_;
+  }
 
   // Get the image index for the given image name.
   int GetImageIdx(const std::string& name) const;
@@ -73,12 +76,6 @@ struct Model {
   std::vector<std::vector<int>> GetMaxOverlappingImages(
       const size_t num_images, const double min_triangulation_angle) const;
 
-  // Get the overlapping images defined in the vis.dat file.
-  const std::vector<std::vector<int>>& GetMaxOverlappingImagesFromPMVS() const;
-
-  // Compute the robust minimum and maximum depths from the sparse point cloud.
-  std::vector<std::pair<float, float>> ComputeDepthRanges() const;
-
   // Compute the number of shared points between all overlapping images.
   std::vector<std::map<int, int>> ComputeSharedPoints() const;
 
@@ -95,13 +92,10 @@ struct Model {
   std::vector<Point> points;
 
  private:
-  bool ReadFromBundlerPMVS(const std::string& path);
-  bool ReadFromRawPMVS(const std::string& path);
-
   std::vector<std::string> image_names_;
   std::unordered_map<std::string, int> image_name_to_idx_;
 
-  std::vector<std::vector<int>> pmvs_vis_dat_;
+  std::vector<std::pair<float, float>> depth_ranges_;
 };
 
 }  // namespace mvs
