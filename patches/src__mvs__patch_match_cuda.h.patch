diff --git a/src/mvs/patch_match_cuda.h b/src/mvs/patch_match_cuda.h
index 36a62ae..92d3f04 100755
--- a/src/mvs/patch_match_cuda.h
+++ b/src/mvs/patch_match_cuda.h
@@ -1,3 +1,35 @@
+// ===============================================================================================================
+// Copyright (c) 2019, Cornell University. All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without modification, are permitted provided that
+// the following conditions are met:
+//
+//     * Redistributions of source code must retain the above copyright otice, this list of conditions and
+//       the following disclaimer.
+//
+//     * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
+//       the following disclaimer in the documentation and/or other materials provided with the distribution.
+//
+//     * Neither the name of Cornell University nor the names of its contributors may be used to endorse or
+//       promote products derived from this software without specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
+// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
+// OF SUCH DAMAGE.
+//
+// Author: Kai Zhang (kz298@cornell.edu)
+//
+// The research is based upon work supported by the Office of the Director of National Intelligence (ODNI),
+// Intelligence Advanced Research Projects Activity (IARPA), via DOI/IBC Contract Number D17PC00287.
+// The U.S. Government is authorized to reproduce and distribute copies of this work for Governmental purposes.
+// ===============================================================================================================
+//
+//
 // Copyright (c) 2022, ETH Zurich and UNC Chapel Hill.
 // All rights reserved.
 //
@@ -100,26 +132,36 @@ class PatchMatchCuda {
   std::unique_ptr<CudaArrayWrapper<uint8_t>> src_images_device_;
   std::unique_ptr<CudaArrayWrapper<float>> src_depth_maps_device_;
 
-  // Relative poses from rotated versions of reference image to source images
-  // corresponding to _rotationInHalfPi:
+  // Source images
   //
   //    [S(1), S(2), S(3), ..., S(n)]
   //
   // where n is the number of source images and:
   //
-  //    S(i) = [K_i(0, 0), K_i(0, 2), K_i(1, 1), K_i(1, 2), R_i(:), T_i(:)
-  //            C_i(:), P(:), P^-1(:)]
+  //    S(i) = [P(:), P^-1(:), C_i(:)]
   //
-  // where i denotes the index of the source image and K is its calibration.
-  // R, T, C, P, P^-1 denote the relative rotation, translation, camera
-  // center, projection, and inverse projection from there reference to the
-  // i-th source image.
-  std::unique_ptr<CudaArrayWrapper<float>> poses_device_[4];
-
-  // Calibration matrix for rotated versions of reference image
-  // as {K[0, 0], K[0, 2], K[1, 1], K[1, 2]} corresponding to _rotationInHalfPi.
-  float ref_K_host_[4][4];
-  float ref_inv_K_host_[4][4];
+  // where i denotes the index of the source image; P, P^-1 denote its 4 by 4 projection, and inverse projection matrices;
+  // C is its camera center
+  std::unique_ptr<CudaArrayWrapper<float>> poses_device_;
+
+  // as {K[0, 0], K[0, 1], K[0, 2], K[1, 0], K[1, 1], K[1, 2]} corresponding to _rotationInHalfPi.
+  float ref_K_host_[4][6];
+  float ref_inv_K_host_[4][6];
+
+  // Extrinsics for rotated versions of reference image
+  float ref_R_host_[4][9];
+  float ref_T_host_[4][3];
+
+  // Projection center of the reference image in scene coordinate frame
+  // rotation does not affect the projection center
+  float ref_C_host_[3];
+
+  // max depth difference for adjacent pixels during depth propagation
+  float max_dist_per_pixel_host_ = 1.0; // 1.0 meters
+
+  // Projection matrix and inverse projection matrix for rotated versions of reference image
+  float ref_P_host_[4][16];
+  float ref_inv_P_host_[4][16];
 
   // Data for reference image.
   std::unique_ptr<GpuMatRefImage> ref_image_;
