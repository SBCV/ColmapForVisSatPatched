diff --git a/src/exe/sfm.cc b/src/exe/sfm.cc
index 24cf919..deee0ee 100644
--- a/src/exe/sfm.cc
+++ b/src/exe/sfm.cc
@@ -1,3 +1,35 @@
+// ===============================================================================================================
+// Copyright (c) 2019, Cornell University. All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without modification, are permitted provided that
+// the following conditions are met:
+//
+//     * Redistributions of source code must retain the above copyright otice, this list of conditions and
+//       the following disclaimer.
+//
+//     * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
+//       the following disclaimer in the documentation and/or other materials provided with the distribution.
+//
+//     * Neither the name of Cornell University nor the names of its contributors may be used to endorse or
+//       promote products derived from this software without specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
+// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
+// OF SUCH DAMAGE.
+//
+// Author: Kai Zhang (kz298@cornell.edu)
+//
+// The research is based upon work supported by the Office of the Director of National Intelligence (ODNI),
+// Intelligence Advanced Research Projects Activity (IARPA), via DOI/IBC Contract Number D17PC00287.
+// The U.S. Government is authorized to reproduce and distribute copies of this work for Governmental purposes.
+// ===============================================================================================================
+//
+//
 // Copyright (c) 2022, ETH Zurich and UNC Chapel Hill.
 // All rights reserved.
 //
@@ -43,6 +75,11 @@
 #include "util/opengl_utils.h"
 #include "util/option_manager.h"
 
+#include <Eigen/Core>
+#include <fstream>
+#include <sstream>
+#define PRECISION 17
+
 namespace colmap {
 
 int RunAutomaticReconstructor(int argc, char** argv) {
@@ -155,12 +192,70 @@ int RunBundleAdjuster(int argc, char** argv) {
   Reconstruction reconstruction;
   reconstruction.Read(input_path);
 
+  // @kai print statistics before bundle adjustment
+  std::stringstream buffer;
+  buffer << "\nBefore Global Bundle Adjustment:";
+  buffer << "\n# of 3D points: " << reconstruction.NumPoints3D();
+  buffer << "\n# of Images Registered: " << reconstruction.NumRegImages() << "/" << reconstruction.NumImages();
+  buffer << "\nAvg. Track Length: " << reconstruction.ComputeMeanTrackLength();
+  buffer << "\nAvg. Per-view Triangulated Observations: " << reconstruction.ComputeMeanObservationsPerRegImage();
+  buffer << "\nAvg. Reproj. Err (pixels): " << reconstruction.ComputeMeanReprojectionError() << "\n";
+
   BundleAdjustmentController ba_controller(options, &reconstruction);
   ba_controller.Start();
   ba_controller.Wait();
 
   reconstruction.Write(output_path);
 
+  // @kai print statistics
+  std::cout << buffer.str();
+  std::cout << "\nAfter Global Bundle Adjustment:";
+  std::cout << "\n# of 3D points: " << reconstruction.NumPoints3D();
+  std::cout << "\n# of Images Registered: " << reconstruction.NumRegImages() << "/" << reconstruction.NumImages();
+  std::cout << "\nAvg. Track Length: " << reconstruction.ComputeMeanTrackLength();
+  std::cout << "\nAvg. Per-view Triangulated Observations: " << reconstruction.ComputeMeanObservationsPerRegImage();
+  std::cout << "\nAvg. Reproj. Err (pixels): " << reconstruction.ComputeMeanReprojectionError() << "\n";
+
+  return EXIT_SUCCESS;
+}
+
+int RunNormalize(int argc, char** argv) {
+  std::string input_path;
+  std::string output_path;
+  std::string save_transform_to_file = "None";
+
+  OptionManager options;
+  options.AddRequiredOption("input_path", &input_path);
+  options.AddRequiredOption("output_path", &output_path);
+  options.AddDefaultOption("save_transform_to_file", &save_transform_to_file);
+  options.Parse(argc, argv);
+
+//  std::cout << "save_transform_to_file: " << save_transform_to_file << std::endl;
+
+  Reconstruction reconstruction;
+  reconstruction.Read(input_path);
+
+  if (save_transform_to_file != "None") {
+//  std::cout << "what the heck!" << std::endl;
+
+  Eigen::Vector3d translation(0., 0., 0.);
+  double scale = 0.;
+  reconstruction.Normalize(10., 0.1, 0.9, true, &translation, &scale);
+
+  std::ofstream file(save_transform_to_file, std::ios::trunc);
+  CHECK(file.is_open()) << save_transform_to_file;
+
+  // set full precision
+  file << std::setprecision(PRECISION);
+  file << "translation: " << std::endl;
+  file << translation(0) << " " << translation(1) << " " << translation(2) << std::endl;
+  file << "scale: " << std::endl;
+  file << scale << std::endl;
+  } else {
+  reconstruction.Normalize();
+  }
+  reconstruction.Write(output_path);
+
   return EXIT_SUCCESS;
 }
 
@@ -403,6 +498,9 @@ int RunPointTriangulatorImpl(Reconstruction& reconstruction,
     timer.PrintMinutes();
   }
 
+  // @kai
+  std::string stats = database_cache.GetStatsString();
+
   std::cout << std::endl;
 
   CHECK_GE(reconstruction.NumRegImages(), 2)
@@ -492,6 +590,18 @@ int RunPointTriangulatorImpl(Reconstruction& reconstruction,
 
   reconstruction.Write(output_path);
 
+
+  // @kai print statistics of the correspondence graph
+  PrintHeading1("Printing Statistics");
+  std::cout << "Before Point Triangulation:";
+  std::cout << stats;
+  std::cout << "\nAfter Point Triangulation:";
+  std::cout << "\n# of 3D points: " << reconstruction.NumPoints3D();
+  std::cout << "\n# of Images Registered: " << reconstruction.NumRegImages() << "/" << reconstruction.NumImages();
+  std::cout << "\nAvg. Track Length: " << reconstruction.ComputeMeanTrackLength();
+  std::cout << "\nAvg. Per-view Triangulated Observations: " << reconstruction.ComputeMeanObservationsPerRegImage();
+  std::cout << "\nAvg. Reproj. Err (pixels): " << reconstruction.ComputeMeanReprojectionError() << "\n";
+
   return EXIT_SUCCESS;
 }
 
