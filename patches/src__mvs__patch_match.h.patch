diff --git a/src/mvs/patch_match.h b/src/mvs/patch_match.h
index 0686fc4..d3cc2c2 100755
--- a/src/mvs/patch_match.h
+++ b/src/mvs/patch_match.h
@@ -1,3 +1,35 @@
+// ===============================================================================================================
+// Copyright (c) 2019, Cornell University. All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without modification, are permitted provided that
+// the following conditions are met:
+//
+//     * Redistributions of source code must retain the above copyright otice, this list of conditions and
+//       the following disclaimer.
+//
+//     * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
+//       the following disclaimer in the documentation and/or other materials provided with the distribution.
+//
+//     * Neither the name of Cornell University nor the names of its contributors may be used to endorse or
+//       promote products derived from this software without specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
+// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
+// OF SUCH DAMAGE.
+//
+// Author: Kai Zhang (kz298@cornell.edu)
+//
+// The research is based upon work supported by the Office of the Director of National Intelligence (ODNI),
+// Intelligence Advanced Research Projects Activity (IARPA), via DOI/IBC Contract Number D17PC00287.
+// The U.S. Government is authorized to reproduce and distribute copies of this work for Governmental purposes.
+// ===============================================================================================================
+//
+//
 // Copyright (c) 2022, ETH Zurich and UNC Chapel Hill.
 // All rights reserved.
 //
@@ -65,8 +97,8 @@ struct PatchMatchOptions {
   std::string gpu_index = "-1";
 
   // Depth range in which to randomly sample depth hypotheses.
-  double depth_min = -1.0f;
-  double depth_max = -1.0f;
+  double depth_min = -1e20;
+  double depth_max = -1e20;
 
   // Half window size to compute NCC photo-consistency cost.
   int window_radius = 5;
@@ -101,6 +133,9 @@ struct PatchMatchOptions {
   // Whether to add a regularized geometric consistency term to the cost
   // function. If true, the `depth_maps` and `normal_maps` must not be null.
   bool geom_consistency = true;
+  bool use_exist_photom = false;
+  // whether to overwrite existing reconstruction
+  bool overwrite = false;
 
   // The relative weight of the geometric consistency term w.r.t. to
   // the photo-consistency term.
@@ -142,9 +177,9 @@ struct PatchMatchOptions {
 
   void Print() const;
   bool Check() const {
-    if (depth_min != -1.0f || depth_max != -1.0f) {
+    if (depth_min > -1e19f || depth_max > -1e19f) {
       CHECK_OPTION_LE(depth_min, depth_max);
-      CHECK_OPTION_GE(depth_min, 0.0f);
+      // CHECK_OPTION_GE(depth_min, 0.0f);
     }
     CHECK_OPTION_LE(window_radius,
                     static_cast<int>(kMaxPatchMatchWindowRadius));
@@ -194,6 +229,9 @@ class PatchMatch {
 
     // Print the configuration to stdout.
     void Print() const;
+
+    // Print the configuration to string
+    std::string PrintToString() const;
   };
 
   PatchMatch(const PatchMatchOptions& options, const Problem& problem);
