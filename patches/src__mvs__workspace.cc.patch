diff --git a/src/mvs/workspace.cc b/src/mvs/workspace.cc
index dff1664..8424342 100644
--- a/src/mvs/workspace.cc
+++ b/src/mvs/workspace.cc
@@ -1,3 +1,35 @@
+// ===============================================================================================================
+// Copyright (c) 2019, Cornell University. All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without modification, are permitted provided that
+// the following conditions are met:
+//
+//     * Redistributions of source code must retain the above copyright otice, this list of conditions and
+//       the following disclaimer.
+//
+//     * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
+//       the following disclaimer in the documentation and/or other materials provided with the distribution.
+//
+//     * Neither the name of Cornell University nor the names of its contributors may be used to endorse or
+//       promote products derived from this software without specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
+// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
+// OF SUCH DAMAGE.
+//
+// Author: Kai Zhang (kz298@cornell.edu)
+//
+// The research is based upon work supported by the Office of the Director of National Intelligence (ODNI),
+// Intelligence Advanced Research Projects Activity (IARPA), via DOI/IBC Contract Number D17PC00287.
+// The U.S. Government is authorized to reproduce and distribute copies of this work for Governmental purposes.
+// ===============================================================================================================
+//
+//
 // Copyright (c) 2022, ETH Zurich and UNC Chapel Hill.
 // All rights reserved.
 //
@@ -221,80 +253,5 @@ const NormalMap& CachedWorkspace::GetNormalMap(const int image_idx) {
   return *cached_image.normal_map;
 }
 
-void ImportPMVSWorkspace(const Workspace& workspace,
-                         const std::string& option_name) {
-  const std::string& workspace_path = workspace.GetOptions().workspace_path;
-  const std::string& stereo_folder = workspace.GetOptions().stereo_folder;
-
-  CreateDirIfNotExists(JoinPaths(workspace_path, stereo_folder));
-  CreateDirIfNotExists(JoinPaths(workspace_path, stereo_folder, "depth_maps"));
-  CreateDirIfNotExists(JoinPaths(workspace_path, stereo_folder, "normal_maps"));
-  CreateDirIfNotExists(
-      JoinPaths(workspace_path, stereo_folder, "consistency_graphs"));
-
-  const auto option_lines =
-      ReadTextFileLines(JoinPaths(workspace_path, option_name));
-  for (const auto& line : option_lines) {
-    if (!StringStartsWith(line, "timages")) {
-      continue;
-    }
-
-    const auto elems = StringSplit(line, " ");
-    int num_images = std::stoull(elems[1]);
-
-    std::vector<int> image_idxs;
-    if (num_images == -1) {
-      CHECK_EQ(elems.size(), 4);
-      const int range_lower = std::stoull(elems[2]);
-      const int range_upper = std::stoull(elems[3]);
-      CHECK_LT(range_lower, range_upper);
-      num_images = range_upper - range_lower;
-      image_idxs.resize(num_images);
-      std::iota(image_idxs.begin(), image_idxs.end(), range_lower);
-    } else {
-      CHECK_EQ(num_images + 2, elems.size());
-      image_idxs.reserve(num_images);
-      for (size_t i = 2; i < elems.size(); ++i) {
-        const int image_idx = std::stoull(elems[i]);
-        image_idxs.push_back(image_idx);
-      }
-    }
-
-    std::vector<std::string> image_names;
-    image_names.reserve(num_images);
-    for (const auto image_idx : image_idxs) {
-      const std::string image_name =
-          workspace.GetModel().GetImageName(image_idx);
-      image_names.push_back(image_name);
-    }
-
-    const auto& overlapping_images =
-        workspace.GetModel().GetMaxOverlappingImagesFromPMVS();
-
-    const auto patch_match_path =
-        JoinPaths(workspace_path, stereo_folder, "patch-match.cfg");
-    const auto fusion_path =
-        JoinPaths(workspace_path, stereo_folder, "fusion.cfg");
-    std::ofstream patch_match_file(patch_match_path, std::ios::trunc);
-    std::ofstream fusion_file(fusion_path, std::ios::trunc);
-    CHECK(patch_match_file.is_open()) << patch_match_path;
-    CHECK(fusion_file.is_open()) << fusion_path;
-    for (size_t i = 0; i < image_names.size(); ++i) {
-      const auto& ref_image_name = image_names[i];
-      patch_match_file << ref_image_name << std::endl;
-      if (overlapping_images.empty()) {
-        patch_match_file << "__auto__, 20" << std::endl;
-      } else {
-        for (const int image_idx : overlapping_images[i]) {
-          patch_match_file << workspace.GetModel().GetImageName(image_idx)
-                           << ", ";
-        }
-        patch_match_file << std::endl;
-      }
-      fusion_file << ref_image_name << std::endl;
-    }
-  }
-}
-
 }  // namespace mvs
 }  // namespace colmap
