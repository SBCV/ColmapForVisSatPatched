diff --git a/src/base/database_cache.h b/src/base/database_cache.h
index a02fa1d..efd7aac 100755
--- a/src/base/database_cache.h
+++ b/src/base/database_cache.h
@@ -1,3 +1,35 @@
+// ===============================================================================================================
+// Copyright (c) 2019, Cornell University. All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without modification, are permitted provided that
+// the following conditions are met:
+//
+//     * Redistributions of source code must retain the above copyright otice, this list of conditions and
+//       the following disclaimer.
+//
+//     * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
+//       the following disclaimer in the documentation and/or other materials provided with the distribution.
+//
+//     * Neither the name of Cornell University nor the names of its contributors may be used to endorse or
+//       promote products derived from this software without specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
+// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
+// OF SUCH DAMAGE.
+//
+// Author: Kai Zhang (kz298@cornell.edu)
+//
+// The research is based upon work supported by the Office of the Director of National Intelligence (ODNI),
+// Intelligence Advanced Research Projects Activity (IARPA), via DOI/IBC Contract Number D17PC00287.
+// The U.S. Government is authorized to reproduce and distribute copies of this work for Governmental purposes.
+// ===============================================================================================================
+//
+//
 // Copyright (c) 2022, ETH Zurich and UNC Chapel Hill.
 // All rights reserved.
 //
@@ -36,7 +68,7 @@
 #include <unordered_map>
 #include <unordered_set>
 #include <vector>
-
+#include <sstream>
 #include <Eigen/Core>
 
 #include "base/camera.h"
@@ -92,6 +124,57 @@ class DatabaseCache {
             const bool ignore_watermarks,
             const std::unordered_set<std::string>& image_names);
 
+  // @kai print statistics
+  std::string GetStatsString() const {
+    std::stringstream buffer;
+
+    std::vector<int> num_observations;
+    std::vector<int> image_ids;
+    // per-view observations
+    for (const auto& image: images_) {
+      image_ids.push_back(image.first);
+      int cnt = image.second.NumObservations();
+      std::cout << image.second.Name() << ", " << cnt << std::endl;
+      num_observations.push_back(cnt);
+    }
+    std::sort(num_observations.begin(), num_observations.end());
+    int min_val = num_observations[0];
+    int max_val = num_observations.back();
+
+    double avg_val = 0.0;
+    for(size_t i=0; i<num_observations.size(); ++i) {
+      avg_val += num_observations[i];
+    }
+    avg_val /= num_observations.size();
+    buffer << "\nAvg. Per-view Observations: " << avg_val;
+    buffer << "\nMin. Per-view Observations: " << min_val;
+    buffer << "\nMax. Per-view Observations: " << max_val;
+
+    // pair-wise matches
+    std::vector<int> num_pairwise_matches;
+    for (size_t i=0; i<image_ids.size(); ++i) {
+      for (size_t j=i+1; j<image_ids.size(); ++j) {
+        int cnt = correspondence_graph_.NumCorrespondencesBetweenImages(image_ids[i], image_ids[j]);
+        num_pairwise_matches.push_back(cnt);
+      }
+    }
+
+    std::sort(num_pairwise_matches.begin(), num_pairwise_matches.end());
+    min_val = num_pairwise_matches[0];
+    max_val = num_pairwise_matches.back();
+
+    avg_val = 0.0;
+    for(size_t i=0; i<num_pairwise_matches.size(); ++i) {
+      avg_val += num_pairwise_matches[i];
+    }
+    avg_val /= num_pairwise_matches.size();
+    buffer << "\nAvg. Pair-wise Matches: " << avg_val;
+    buffer << "\nMin. Pair-wise Matches: " << min_val;
+    buffer << "\nMax. Pair-wise Matches: " << max_val << std::endl;
+
+    return buffer.str();
+  }
+
   // Find specific image by name. Note that this uses linear search.
   const class Image* FindImageWithName(const std::string& name) const;
 
