diff --git a/src/colmap/mvs/patch_match.cc b/src/colmap/mvs/patch_match.cc
index 836bcb15..959bd0f5 100644
--- a/src/colmap/mvs/patch_match.cc
+++ b/src/colmap/mvs/patch_match.cc
@@ -1,3 +1,35 @@
+// ===============================================================================================================
+// Copyright (c) 2019, Cornell University. All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without modification, are permitted provided that
+// the following conditions are met:
+//
+//     * Redistributions of source code must retain the above copyright otice, this list of conditions and
+//       the following disclaimer.
+//
+//     * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
+//       the following disclaimer in the documentation and/or other materials provided with the distribution.
+//
+//     * Neither the name of Cornell University nor the names of its contributors may be used to endorse or
+//       promote products derived from this software without specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
+// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
+// OF SUCH DAMAGE.
+//
+// Author: Kai Zhang (kz298@cornell.edu)
+//
+// The research is based upon work supported by the Office of the Director of National Intelligence (ODNI),
+// Intelligence Advanced Research Projects Activity (IARPA), via DOI/IBC Contract Number D17PC00287.
+// The U.S. Government is authorized to reproduce and distribute copies of this work for Governmental purposes.
+// ===============================================================================================================
+//
+//
 // Copyright (c) 2023, ETH Zurich and UNC Chapel Hill.
 // All rights reserved.
 //
@@ -39,6 +71,7 @@
 
 #include <numeric>
 #include <unordered_set>
+#include <sstream>
 
 #define PrintOption(option) std::cout << #option ": " << option << std::endl
 
@@ -93,6 +126,24 @@ void PatchMatch::Problem::Print() const {
   }
 }
 
+std::string PatchMatch::Problem::PrintToString() const {
+  std::ostringstream buffer;
+
+  buffer << "ref_image_idx: " << ref_image_idx << std::endl;
+  buffer << "#_src_images: " << src_image_idxs.size() << std::endl;
+  buffer << "src_image_idx: ";
+  if (!src_image_idxs.empty()) {
+    for (size_t i = 0; i < src_image_idxs.size() - 1; ++i) {
+        buffer << src_image_idxs[i] << " ";
+    }
+    buffer << src_image_idxs.back() << std::endl;
+  } else {
+    buffer << std::endl;
+  }
+
+  return buffer.str();
+}
+
 void PatchMatch::Check() const {
   CHECK(options_.Check());
 
@@ -130,13 +181,6 @@ void PatchMatch::Check() const {
     CHECK_EQ(image.GetWidth(), image.GetBitmap().Width()) << image_idx;
     CHECK_EQ(image.GetHeight(), image.GetBitmap().Height()) << image_idx;
 
-    // Make sure, the calibration matrix only contains fx, fy, cx, cy.
-    CHECK_LT(std::abs(image.GetK()[1] - 0.0f), 1e-6f) << image_idx;
-    CHECK_LT(std::abs(image.GetK()[3] - 0.0f), 1e-6f) << image_idx;
-    CHECK_LT(std::abs(image.GetK()[6] - 0.0f), 1e-6f) << image_idx;
-    CHECK_LT(std::abs(image.GetK()[7] - 0.0f), 1e-6f) << image_idx;
-    CHECK_LT(std::abs(image.GetK()[8] - 1.0f), 1e-6f) << image_idx;
-
     if (options_.geom_consistency) {
       CHECK_LT(image_idx, problem_.depth_maps->size()) << image_idx;
       const DepthMap& depth_map = problem_.depth_maps->at(image_idx);
@@ -204,7 +248,7 @@ void PatchMatchController::Run() {
 
   // If geometric consistency is enabled, then photometric output must be
   // computed first for all images without filtering.
-  if (options_.geom_consistency) {
+  if (options_.geom_consistency && !options_.use_exist_photom) {
     auto photometric_options = options_;
     photometric_options.geom_consistency = false;
     photometric_options.filter = false;
@@ -225,6 +269,9 @@ void PatchMatchController::Run() {
         &PatchMatchController::ProcessProblem, this, options_, problem_idx);
   }
 
+  // for debug
+  //  thread_pool_->AddTask(&PatchMatchController::ProcessProblem, this, options_, (size_t) 0);
+
   thread_pool_->Wait();
 
   GetTimer().PrintMinutes();
@@ -237,10 +284,6 @@ void PatchMatchController::ReadWorkspace() {
 
   auto workspace_format_lower_case = workspace_format_;
   StringToLower(&workspace_format_lower_case);
-  if (workspace_format_lower_case == "pmvs") {
-    workspace_options.stereo_folder =
-        StringPrintf("stereo-%s", pmvs_option_name_.c_str());
-  }
 
   workspace_options.max_image_size = options_.max_image_size;
   workspace_options.image_as_rgb = false;
@@ -258,7 +301,7 @@ void PatchMatchController::ReadWorkspace() {
     ImportPMVSWorkspace(*workspace_, pmvs_option_name_);
   }
 
-  depth_ranges_ = workspace_->GetModel().ComputeDepthRanges();
+  depth_ranges_ = workspace_->GetModel().GetDepthRanges();
 }
 
 void PatchMatchController::ReadProblems() {
@@ -290,6 +333,7 @@ void PatchMatchController::ReadProblems() {
   };
   std::vector<ProblemConfig> problem_configs;
 
+  // read patch-match.cfg
   for (size_t i = 0; i < config.size(); ++i) {
     std::string& config_line = config[i];
     StringTrim(&config_line);
@@ -313,6 +357,7 @@ void PatchMatchController::ReadProblems() {
     ref_image_name.clear();
   }
 
+  // post-process patch-match.cfg
   for (const auto& problem_config : problem_configs) {
     PatchMatch::Problem problem;
 
@@ -376,7 +421,7 @@ void PatchMatchController::ReadProblems() {
       for (size_t i = 0; i < eff_max_num_src_images; ++i) {
         problem.src_image_idxs.push_back(src_images[i].first);
       }
-    } else {
+    } else {   // source images directly specified in patch-match.cfg
       problem.src_image_idxs.reserve(problem_config.src_image_names.size());
       for (const auto& src_image_name : problem_config.src_image_names) {
         problem.src_image_idxs.push_back(model.GetImageIdx(src_image_name));
@@ -395,6 +440,13 @@ void PatchMatchController::ReadProblems() {
     }
   }
 
+  // write all problems into a text
+  std::ofstream ref2src_file(JoinPaths(workspace_path_, "ref2src.txt"), std::ios::trunc);
+  for(size_t i=0; i < problems_.size(); ++i) {
+    ref2src_file << problems_[i].PrintToString();
+  }
+  ref2src_file.close();
+
   std::cout << StringPrintf("Configuration has %d problems...",
                             problems_.size())
             << std::endl;
@@ -435,9 +487,10 @@ void PatchMatchController::ProcessProblem(const PatchMatchOptions& options,
   const std::string consistency_graph_path = JoinPaths(
       workspace_path_, stereo_folder, "consistency_graphs", file_name);
 
-  if (ExistsFile(depth_map_path) && ExistsFile(normal_map_path) &&
+  if ((!options.overwrite) && ExistsFile(depth_map_path) && ExistsFile(normal_map_path) &&
       (!options.write_consistency_graph ||
        ExistsFile(consistency_graph_path))) {
+    std::cout << "skipping view " << problem_idx + 1 << ", as the depth map and normal map already exist." << std::endl;
     return;
   }
 
@@ -448,7 +501,7 @@ void PatchMatchController::ProcessProblem(const PatchMatchOptions& options,
 
   auto patch_match_options = options;
 
-  if (patch_match_options.depth_min < 0 || patch_match_options.depth_max < 0) {
+  if (patch_match_options.depth_min < -1e19f || patch_match_options.depth_max < -1e19f) {
     patch_match_options.depth_min =
         depth_ranges_.at(problem.ref_image_idx).first;
     patch_match_options.depth_max =
