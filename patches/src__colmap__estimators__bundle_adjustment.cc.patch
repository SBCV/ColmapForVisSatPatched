diff --git a/src/colmap/estimators/bundle_adjustment.cc b/src/colmap/estimators/bundle_adjustment.cc
index 4af4e605..0a221d85 100644
--- a/src/colmap/estimators/bundle_adjustment.cc
+++ b/src/colmap/estimators/bundle_adjustment.cc
@@ -1,3 +1,35 @@
+// ===============================================================================================================
+// Copyright (c) 2019, Cornell University. All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without modification, are permitted provided that
+// the following conditions are met:
+//
+//     * Redistributions of source code must retain the above copyright otice, this list of conditions and
+//       the following disclaimer.
+//
+//     * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
+//       the following disclaimer in the documentation and/or other materials provided with the distribution.
+//
+//     * Neither the name of Cornell University nor the names of its contributors may be used to endorse or
+//       promote products derived from this software without specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
+// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
+// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
+// OF SUCH DAMAGE.
+//
+// Author: Kai Zhang (kz298@cornell.edu)
+//
+// The research is based upon work supported by the Office of the Director of National Intelligence (ODNI),
+// Intelligence Advanced Research Projects Activity (IARPA), via DOI/IBC Contract Number D17PC00287.
+// The U.S. Government is authorized to reproduce and distribute copies of this work for Governmental purposes.
+// ===============================================================================================================
+//
+//
 // Copyright (c) 2023, ETH Zurich and UNC Chapel Hill.
 // All rights reserved.
 //
@@ -190,6 +222,10 @@ const std::unordered_set<point3D_t>& BundleAdjustmentConfig::ConstantPoints()
   return constant_point3D_ids_;
 }
 
+const std::unordered_set<point3D_t>& BundleAdjustmentConfig::ConstrainedPoints() const {
+  return constrained_point3D_ids_;
+}
+
 const std::unordered_set<image_t>& BundleAdjustmentConfig::ConstantCamPoses()
     const {
   return constant_cam_poses_;
@@ -210,6 +246,11 @@ void BundleAdjustmentConfig::AddConstantPoint(const point3D_t point3D_id) {
   constant_point3D_ids_.insert(point3D_id);
 }
 
+void BundleAdjustmentConfig::AddConstrainedPoint(const point3D_t point3D_id) {
+   CHECK(!HasConstrainedPoint(point3D_id));
+   constrained_point3D_ids_.insert(point3D_id);
+}
+
 bool BundleAdjustmentConfig::HasPoint(const point3D_t point3D_id) const {
   return HasVariablePoint(point3D_id) || HasConstantPoint(point3D_id);
 }
@@ -224,6 +265,10 @@ bool BundleAdjustmentConfig::HasConstantPoint(
   return constant_point3D_ids_.find(point3D_id) != constant_point3D_ids_.end();
 }
 
+bool BundleAdjustmentConfig::HasConstrainedPoint(const point3D_t point3D_id) const {
+   return constrained_point3D_ids_.find(point3D_id) != constrained_point3D_ids_.end();
+}
+
 void BundleAdjustmentConfig::RemoveVariablePoint(const point3D_t point3D_id) {
   variable_point3D_ids_.erase(point3D_id);
 }
@@ -232,6 +277,10 @@ void BundleAdjustmentConfig::RemoveConstantPoint(const point3D_t point3D_id) {
   constant_point3D_ids_.erase(point3D_id);
 }
 
+void BundleAdjustmentConfig::RemoveConstrainedPoint(const point3D_t point3D_id) {
+  constrained_point3D_ids_.erase(point3D_id);
+}
+
 BundleAdjuster::BundleAdjuster(BundleAdjustmentOptions options,
                                BundleAdjustmentConfig config)
     : options_(std::move(options)), config_(std::move(config)) {
@@ -265,6 +314,26 @@ ceres::LossFunction* BundleAdjustmentOptions::CreateLossFunction() const {
   return loss_function;
 }
 
+ceres::LossFunction* BundleAdjustmentOptions::CreateConstrainPointsLossFunction() const {
+  ceres::LossFunction* loss_function = nullptr;
+  switch (constrain_points_loss) {
+    case LossFunctionType::TRIVIAL:
+      loss_function = new ceres::ScaledLoss(new ceres::TrivialLoss(), constrain_points_loss_weight,
+          ceres::TAKE_OWNERSHIP);
+      break;
+    case LossFunctionType::SOFT_L1:
+      loss_function = new ceres::ScaledLoss(new ceres::SoftLOneLoss(constrain_points_loss_scale), constrain_points_loss_weight,
+          ceres::TAKE_OWNERSHIP);
+      break;
+    case LossFunctionType::CAUCHY:
+      loss_function = new ceres::ScaledLoss(new ceres::CauchyLoss(constrain_points_loss_scale), constrain_points_loss_weight,
+          ceres::TAKE_OWNERSHIP);
+      break;
+  }
+  CHECK_NOTNULL(loss_function);
+  return loss_function;
+}
+
 ceres::Solver::Options BundleAdjustmentOptions::CreateSolverOptions(
     const BundleAdjustmentConfig& config, const ceres::Problem& problem) const {
   ceres::Solver::Options custom_solver_options = solver_options;
@@ -367,6 +436,7 @@ ceres::Solver::Options BundleAdjustmentOptions::CreateSolverOptions(
 
 bool BundleAdjustmentOptions::Check() const {
   CHECK_OPTION_GE(loss_function_scale, 0);
+  CHECK_OPTION_GE(constrain_points_loss_scale, 0);
   CHECK_OPTION_LT(max_num_images_direct_dense_cpu_solver,
                   max_num_images_direct_sparse_cpu_solver);
   CHECK_OPTION_LT(max_num_images_direct_dense_gpu_solver,
@@ -461,6 +531,13 @@ class DefaultBundleAdjuster : public BundleAdjuster {
       AddPointToProblem(point3D_id, reconstruction);
     }
 
+    // add constrained points
+    ceres::LossFunction* constrain_points_loss_function = options_.CreateConstrainPointsLossFunction();
+    for (const auto point3D_id : config_.ConstrainedPoints()) {
+      AddConstrainedPointToProblem(point3D_id, reconstruction, constrain_points_loss_function);
+    }
+
+
     ParameterizeCameras(
         options_, config_, camera_ids_, reconstruction, *problem_);
     ParameterizePoints(
@@ -596,6 +673,16 @@ class DefaultBundleAdjuster : public BundleAdjuster {
     }
   }
 
+void AddConstrainedPointToProblem(const point3D_t point3D_id,
+                                  Reconstruction& reconstruction,
+                                  ceres::LossFunction* loss_function) {
+  Point3D& point3D = reconstruction.Point3D(point3D_id);
+
+  ceres::CostFunction* cost_function = Point3DCostFunction::Create(point3D.xyz);
+
+  problem_->AddResidualBlock(cost_function, loss_function, point3D.xyz.data());
+}
+
  private:
   std::shared_ptr<ceres::Problem> problem_;
   std::unique_ptr<ceres::LossFunction> loss_function_;
