diff --git a/scripts/python/build.py b/scripts/python/build.py
index aeed273..89081e2 100644
--- a/scripts/python/build.py
+++ b/scripts/python/build.py
@@ -118,6 +118,7 @@ def parse_args():
     parser.set_defaults(with_suite_sparse=True)
     parser.set_defaults(with_cuda=True)
     parser.set_defaults(with_opengl=True)
+    # parser.set_defaults(with_opengl=False)
     parser.set_defaults(with_tests=True)
     parser.set_defaults(ssl_verification=True)
 
@@ -188,7 +189,7 @@ def download_zipfile(url, archive_path, unzip_path, md5_hash):
         r = requests.get(url)
         with open(archive_path, 'wb') as outfile:
             outfile.write(r.content)
-    check_md5_hash(archive_path, md5_hash)
+    # check_md5_hash(archive_path, md5_hash)
     with zipfile.ZipFile(archive_path, "r") as fid:
         fid.extractall(unzip_path)
 
@@ -254,9 +255,11 @@ def build_freeimage(args):
             os.path.join(path, "Dist/x64/FreeImage.dll"),
             os.path.join(args.install_path, "lib/FreeImage.dll"))
     else:
-        url = "https://kent.dl.sourceforge.net/project/freeimage/" \
-              "Source%20Distribution/3.18.0/FreeImage3180.zip"
-        archive_path = os.path.join(args.download_path, "freeimage-3.18.0.zip")
+        # url = "https://kent.dl.sourceforge.net/project/freeimage/" \
+        #       "Source%20Distribution/3.18.0/FreeImage3180.zip"
+        # archive_path = os.path.join(args.download_path, "freeimage-3.18.0.zip")
+        url = 'http://downloads.sourceforge.net/freeimage/FreeImage3180.zip'
+        archive_path = os.path.join(args.download_path, "FreeImage3180.zip")
         download_zipfile(url, archive_path, args.build_path,
                          "f8ba138a3be233a3eed9c456e42e2578")
         shutil.move(os.path.join(args.build_path, "FreeImage"), path)
@@ -271,24 +274,26 @@ def build_freeimage(args):
                         line = "FreeImage: $(STATICLIB)"
                     print(line, end="")
         elif PLATFORM_IS_LINUX:
-            with fileinput.FileInput(
-                    os.path.join(path, "Source/LibWebP/src/dsp/"
-                                 "upsampling_mips_dsp_r2.c"),
-                    inplace=True, backup=".bak") as fid:
-                for i, line in enumerate(fid):
-                    if i >= 36 and i <= 44:
-                        line = line.replace("%[\"", "%[\" ")
-                        line = line.replace("\"],", " \"],")
-                    print(line, end="")
-            with fileinput.FileInput(
-                    os.path.join(path, "Source/LibWebP/src/dsp/"
-                                 "yuv_mips_dsp_r2.c"),
-                    inplace=True, backup=".bak") as fid:
-                for i, line in enumerate(fid):
-                    if i >= 56 and i <= 58:
-                        line = line.replace("\"#", "\"# ")
-                        line = line.replace("\"(%", " \"(%")
-                    print(line, end="")
+            pass
+
+            # with fileinput.FileInput(
+            #         os.path.join(path, "Source/LibWebP/src/dsp/"
+            #                      "upsampling_mips_dsp_r2.c"),
+            #         inplace=True, backup=".bak") as fid:
+            #     for i, line in enumerate(fid):
+            #         if i >= 36 and i <= 44:
+            #             line = line.replace("%[\"", "%[\" ")
+            #             line = line.replace("\"],", " \"],")
+            #         print(line, end="")
+            # with fileinput.FileInput(
+            #         os.path.join(path, "Source/LibWebP/src/dsp/"
+            #                      "yuv_mips_dsp_r2.c"),
+            #         inplace=True, backup=".bak") as fid:
+            #     for i, line in enumerate(fid):
+            #         if i >= 56 and i <= 58:
+            #             line = line.replace("\"#", "\"# ")
+            #             line = line.replace("\"(%", " \"(%")
+            #         print(line, end="")
 
         subprocess.call(["make", "-f", "Makefile.gnu",
                          "-j{}".format(multiprocessing.cpu_count())], cwd=path)
